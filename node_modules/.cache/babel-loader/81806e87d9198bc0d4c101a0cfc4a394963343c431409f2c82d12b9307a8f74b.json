{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saifs\\\\OneDrive\\\\Desktop\\\\WORDLE-GAME-REPO\\\\Wordle-Game\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Optional for styling\nimport { Wordle, GREEN, YELLOW, BLACK } from './classes/Wordle'; // Correct import path for Wordle\nimport fiveLetterWords from './fiveLetterWords'; // Import the list of words\n\n// Function to pick a random word from the list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomWord = () => {\n  const randomIndex = Math.floor(Math.random() * fiveLetterWords.length);\n  return fiveLetterWords[randomIndex];\n};\nconst WordleGame = () => {\n  _s();\n  const [guess, setGuess] = useState('');\n  const [attempts, setAttempts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [wordle, setWordle] = useState(new Wordle(getRandomWord())); // Pick a random word when the game starts\n\n  const handleGuessChange = e => {\n    setGuess(e.target.value);\n  };\n  const handleSubmitGuess = () => {\n    if (guess.length !== 5) {\n      setMessage('Please enter a 5-letter word');\n      return;\n    }\n    const result = wordle.checkWord(guess);\n    setAttempts([...attempts, {\n      guess,\n      result\n    }]);\n    setGuess('');\n    if (result.every(color => color === GREEN)) {\n      setMessage('Congratulations! You guessed the word!');\n    } else {\n      setMessage('Try again!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Guess the 5-letter word!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: guess,\n      onChange: handleGuessChange,\n      maxLength: 5,\n      placeholder: \"Enter your guess\",\n      style: {\n        padding: '10px',\n        fontSize: '16px',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitGuess,\n      style: {\n        padding: '10px',\n        fontSize: '16px'\n      },\n      children: \"Submit Guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attempts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), attempts.map((attempt, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [attempt.guess.toUpperCase(), \" - \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), attempt.result.map((color, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: color === GREEN ? 'green' : color === YELLOW ? 'yellow' : color === BLACK ? 'black' : 'gray',\n            // Fallback color if needed\n            fontWeight: 'bold',\n            fontSize: '20px'\n          },\n          children: attempt.guess[i].toUpperCase()\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n// Render the Wordle game to the root element in index.html\n_s(WordleGame, \"wW7QkYdYQmWYIodpZTloRgcOWlk=\");\n_c = WordleGame;\nReactDOM.render(/*#__PURE__*/_jsxDEV(WordleGame, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 91,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","Wordle","GREEN","YELLOW","BLACK","fiveLetterWords","jsxDEV","_jsxDEV","getRandomWord","randomIndex","Math","floor","random","length","WordleGame","_s","guess","setGuess","attempts","setAttempts","message","setMessage","wordle","setWordle","handleGuessChange","e","target","value","handleSubmitGuess","result","checkWord","every","color","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","maxLength","placeholder","padding","fontSize","marginBottom","onClick","map","attempt","index","toUpperCase","i","fontWeight","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/saifs/OneDrive/Desktop/WORDLE-GAME-REPO/Wordle-Game/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  // Optional for styling\nimport { Wordle, GREEN, YELLOW, BLACK } from './classes/Wordle'; // Correct import path for Wordle\nimport fiveLetterWords from './fiveLetterWords'; // Import the list of words\n\n// Function to pick a random word from the list\nconst getRandomWord = () => {\n  const randomIndex = Math.floor(Math.random() * fiveLetterWords.length);\n  return fiveLetterWords[randomIndex];\n};\n\nconst WordleGame = () => {\n  const [guess, setGuess] = useState('');\n  const [attempts, setAttempts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [wordle, setWordle] = useState(new Wordle(getRandomWord())); // Pick a random word when the game starts\n\n  const handleGuessChange = (e) => {\n    setGuess(e.target.value);\n  };\n\n  const handleSubmitGuess = () => {\n    if (guess.length !== 5) {\n      setMessage('Please enter a 5-letter word');\n      return;\n    }\n    const result = wordle.checkWord(guess);\n    setAttempts([...attempts, { guess, result }]);\n    setGuess('');\n    if (result.every((color) => color === GREEN)) {\n      setMessage('Congratulations! You guessed the word!');\n    } else {\n      setMessage('Try again!');\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Wordle Game</h1>\n      <h2>Guess the 5-letter word!</h2>\n      <input\n        type=\"text\"\n        value={guess}\n        onChange={handleGuessChange}\n        maxLength={5}\n        placeholder=\"Enter your guess\"\n        style={{ padding: '10px', fontSize: '16px', marginBottom: '20px' }}\n      />\n      <button\n        onClick={handleSubmitGuess}\n        style={{ padding: '10px', fontSize: '16px' }}\n      >\n        Submit Guess\n      </button>\n\n      <p>{message}</p>\n\n      <div>\n        <h3>Attempts:</h3>\n        {attempts.map((attempt, index) => (\n          <div key={index} style={{ marginBottom: '10px' }}>\n            <span>{attempt.guess.toUpperCase()} - </span>\n            {attempt.result.map((color, i) => (\n              <span\n                key={i}\n                style={{\n                  color:\n                    color === GREEN\n                      ? 'green'\n                      : color === YELLOW\n                      ? 'yellow'\n                      : color === BLACK\n                      ? 'black'\n                      : 'gray', // Fallback color if needed\n                  fontWeight: 'bold',\n                  fontSize: '20px',\n                }}\n              >\n                {attempt.guess[i].toUpperCase()}\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Render the Wordle game to the root element in index.html\nReactDOM.render(<WordleGame />, document.getElementById('root'));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Constants for feedback colors\nexport const GREEN = \"g\";\nexport const YELLOW = \"y\";\nexport const BLACK = \"b\";\nclass Wordle {\n  constructor(word) {\n    this.word = word;\n  }\n  checkWord(guess) {\n    if (guess.length !== this.word.length) {\n      return [];\n    }\n    let result = [];\n    let wordCopy = this.word.split(\"\"); // Create a copy of the word to track matched letters.\n\n    // First pass: Check for GREEN (correct letter in the correct position)\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === this.word[i]) {\n        result.push(GREEN);\n        wordCopy[i] = null; // Mark this position as processed in the word copy\n      } else {\n        result.push(null); // Temporarily leave as null\n      }\n    }\n\n    // Second pass: Check for YELLOW (correct letter, wrong position)\n    for (let i = 0; i < guess.length; i++) {\n      if (result[i] === null && wordCopy.includes(guess[i])) {\n        result[i] = YELLOW;\n        wordCopy[wordCopy.indexOf(guess[i])] = null; // Mark this letter as processed\n      }\n      if (result[i] === null) {\n        result[i] = BLACK; // If the letter is not in the word, mark it as BLACK\n      }\n    }\n    return result;\n  }\n\n  // Letter repeated check\n  letterRepeated(guess, index) {\n    const letter = guess[index]; // Get the letter at the given index\n    let countInGuess = 0;\n    let countInWord = 0;\n\n    // Count occurrences of the letter in the guess\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === letter) {\n        countInGuess++;\n      }\n    }\n\n    // Count occurrences of the letter in the wordle\n    for (let i = 0; i < this.word.length; i++) {\n      if (this.word[i] === letter) {\n        countInWord++;\n      }\n    }\n    if (countInGuess > 1 && countInWord === 1) {\n      return false;\n    }\n    return countInGuess > 1 && countInGuess !== countInWord;\n  }\n}\nexport { Wordle };","map":{"version":3,"names":["GREEN","YELLOW","BLACK","Wordle","constructor","word","checkWord","guess","length","result","wordCopy","split","i","push","includes","indexOf","letterRepeated","index","letter","countInGuess","countInWord"],"sources":["C:/Users/saifs/OneDrive/Desktop/WORDLE-GAME-REPO/Wordle-Game/src/classes/Wordle.js"],"sourcesContent":["// Constants for feedback colors\r\nexport const GREEN = \"g\";\r\nexport const YELLOW = \"y\";\r\nexport const BLACK = \"b\";\r\n\r\nclass Wordle {\r\n  word;\r\n  constructor(word) {\r\n    this.word = word;\r\n  }\r\n\r\n  checkWord(guess) {\r\n    if (guess.length !== this.word.length) {\r\n      return [];\r\n    }\r\n\r\n    let result = [];\r\n    let wordCopy = this.word.split(\"\"); // Create a copy of the word to track matched letters.\r\n\r\n    // First pass: Check for GREEN (correct letter in the correct position)\r\n    for (let i = 0; i < guess.length; i++) {\r\n      if (guess[i] === this.word[i]) {\r\n        result.push(GREEN);\r\n        wordCopy[i] = null; // Mark this position as processed in the word copy\r\n      } else {\r\n        result.push(null); // Temporarily leave as null\r\n      }\r\n    }\r\n\r\n    // Second pass: Check for YELLOW (correct letter, wrong position)\r\n    for (let i = 0; i < guess.length; i++) {\r\n      if (result[i] === null && wordCopy.includes(guess[i])) {\r\n        result[i] = YELLOW;\r\n        wordCopy[wordCopy.indexOf(guess[i])] = null; // Mark this letter as processed\r\n      }\r\n      if (result[i] === null) {\r\n        result[i] = BLACK; // If the letter is not in the word, mark it as BLACK\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Letter repeated check\r\n  letterRepeated(guess, index) {\r\n    const letter = guess[index]; // Get the letter at the given index\r\n    let countInGuess = 0;\r\n    let countInWord = 0;\r\n  \r\n    // Count occurrences of the letter in the guess\r\n    for (let i = 0; i < guess.length; i++) {\r\n      if (guess[i] === letter) {\r\n        countInGuess++;\r\n      }\r\n    }\r\n  \r\n    // Count occurrences of the letter in the wordle\r\n    for (let i = 0; i < this.word.length; i++) {\r\n      if (this.word[i] === letter) {\r\n        countInWord++;\r\n      }\r\n    }\r\n  \r\n    \r\n    if (countInGuess > 1 && countInWord === 1) {\r\n      return false;\r\n    }\r\n  \r\n    \r\n    return countInGuess > 1 && countInGuess !== countInWord;\r\n  }\r\n}\r\n\r\nexport { Wordle }; \r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAG,GAAG;AACxB,OAAO,MAAMC,MAAM,GAAG,GAAG;AACzB,OAAO,MAAMC,KAAK,GAAG,GAAG;AAExB,MAAMC,MAAM,CAAC;EAEXC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAC,SAASA,CAACC,KAAK,EAAE;IACf,IAAIA,KAAK,CAACC,MAAM,KAAK,IAAI,CAACH,IAAI,CAACG,MAAM,EAAE;MACrC,OAAO,EAAE;IACX;IAEA,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,IAAI,CAACL,IAAI,CAACM,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEpC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;MACrC,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAK,IAAI,CAACP,IAAI,CAACO,CAAC,CAAC,EAAE;QAC7BH,MAAM,CAACI,IAAI,CAACb,KAAK,CAAC;QAClBU,QAAQ,CAACE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MACtB,CAAC,MAAM;QACLH,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB;IACF;;IAEA;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;MACrC,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,IAAI,IAAIF,QAAQ,CAACI,QAAQ,CAACP,KAAK,CAACK,CAAC,CAAC,CAAC,EAAE;QACrDH,MAAM,CAACG,CAAC,CAAC,GAAGX,MAAM;QAClBS,QAAQ,CAACA,QAAQ,CAACK,OAAO,CAACR,KAAK,CAACK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MAC/C;MACA,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,IAAI,EAAE;QACtBH,MAAM,CAACG,CAAC,CAAC,GAAGV,KAAK,CAAC,CAAC;MACrB;IACF;IAEA,OAAOO,MAAM;EACf;;EAEA;EACAO,cAAcA,CAACT,KAAK,EAAEU,KAAK,EAAE;IAC3B,MAAMC,MAAM,GAAGX,KAAK,CAACU,KAAK,CAAC,CAAC,CAAC;IAC7B,IAAIE,YAAY,GAAG,CAAC;IACpB,IAAIC,WAAW,GAAG,CAAC;;IAEnB;IACA,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;MACrC,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAKM,MAAM,EAAE;QACvBC,YAAY,EAAE;MAChB;IACF;;IAEA;IACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,IAAI,CAACG,MAAM,EAAEI,CAAC,EAAE,EAAE;MACzC,IAAI,IAAI,CAACP,IAAI,CAACO,CAAC,CAAC,KAAKM,MAAM,EAAE;QAC3BE,WAAW,EAAE;MACf;IACF;IAGA,IAAID,YAAY,GAAG,CAAC,IAAIC,WAAW,KAAK,CAAC,EAAE;MACzC,OAAO,KAAK;IACd;IAGA,OAAOD,YAAY,GAAG,CAAC,IAAIA,YAAY,KAAKC,WAAW;EACzD;AACF;AAEA,SAASjB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
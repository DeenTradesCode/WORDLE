{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saifs\\\\OneDrive\\\\Desktop\\\\WORDLE-GAME-REPO\\\\Wordle-Game\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Optional, for styling\nimport { Wordle, GREEN, YELLOW, BLACK } from './Wordle'; // Import Wordle game logic\n\n// Wordle game component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordleGame = () => {\n  _s();\n  const [guess, setGuess] = useState('');\n  const [attempts, setAttempts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [wordle, setWordle] = useState(new Wordle('candy')); // Replace with random word logic if needed\n\n  const handleGuessChange = e => {\n    setGuess(e.target.value);\n  };\n  const handleSubmitGuess = () => {\n    if (guess.length !== 5) {\n      setMessage('Please enter a 5-letter word');\n      return;\n    }\n    const result = wordle.checkWord(guess);\n    setAttempts([...attempts, {\n      guess,\n      result\n    }]);\n    setGuess('');\n    if (result.every(color => color === GREEN)) {\n      setMessage('Congratulations! You guessed the word!');\n    } else {\n      setMessage('Try again!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Guess the 5-letter word!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: guess,\n      onChange: handleGuessChange,\n      maxLength: 5,\n      placeholder: \"Enter your guess\",\n      style: {\n        padding: '10px',\n        fontSize: '16px',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitGuess,\n      style: {\n        padding: '10px',\n        fontSize: '16px'\n      },\n      children: \"Submit Guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attempts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), attempts.map((attempt, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [attempt.guess.toUpperCase(), \" - \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), attempt.result.map((color, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: color === GREEN ? 'green' : color === YELLOW ? 'yellow' : 'black',\n            fontWeight: 'bold',\n            fontSize: '20px'\n          },\n          children: attempt.guess[i].toUpperCase()\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n// Render the Wordle game to the root\n_s(WordleGame, \"SER6DB/pa7BXN9zWFrlyTqiY9nQ=\");\n_c = WordleGame;\nReactDOM.render(/*#__PURE__*/_jsxDEV(WordleGame, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 78,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["React","useState","ReactDOM","Wordle","GREEN","YELLOW","BLACK","jsxDEV","_jsxDEV","WordleGame","_s","guess","setGuess","attempts","setAttempts","message","setMessage","wordle","setWordle","handleGuessChange","e","target","value","handleSubmitGuess","length","result","checkWord","every","color","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","maxLength","placeholder","padding","fontSize","marginBottom","onClick","map","attempt","index","toUpperCase","i","fontWeight","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/saifs/OneDrive/Desktop/WORDLE-GAME-REPO/Wordle-Game/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Optional, for styling\nimport { Wordle, GREEN, YELLOW, BLACK } from './Wordle'; // Import Wordle game logic\n\n// Wordle game component\nconst WordleGame = () => {\n  const [guess, setGuess] = useState('');\n  const [attempts, setAttempts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [wordle, setWordle] = useState(new Wordle('candy')); // Replace with random word logic if needed\n\n  const handleGuessChange = (e) => {\n    setGuess(e.target.value);\n  };\n\n  const handleSubmitGuess = () => {\n    if (guess.length !== 5) {\n      setMessage('Please enter a 5-letter word');\n      return;\n    }\n    const result = wordle.checkWord(guess);\n    setAttempts([...attempts, { guess, result }]);\n    setGuess('');\n    if (result.every((color) => color === GREEN)) {\n      setMessage('Congratulations! You guessed the word!');\n    } else {\n      setMessage('Try again!');\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Wordle Game</h1>\n      <h2>Guess the 5-letter word!</h2>\n      <input\n        type=\"text\"\n        value={guess}\n        onChange={handleGuessChange}\n        maxLength={5}\n        placeholder=\"Enter your guess\"\n        style={{ padding: '10px', fontSize: '16px', marginBottom: '20px' }}\n      />\n      <button\n        onClick={handleSubmitGuess}\n        style={{ padding: '10px', fontSize: '16px' }}\n      >\n        Submit Guess\n      </button>\n\n      <p>{message}</p>\n\n      <div>\n        <h3>Attempts:</h3>\n        {attempts.map((attempt, index) => (\n          <div key={index} style={{ marginBottom: '10px' }}>\n            <span>{attempt.guess.toUpperCase()} - </span>\n            {attempt.result.map((color, i) => (\n              <span\n                key={i}\n                style={{\n                  color: color === GREEN ? 'green' : color === YELLOW ? 'yellow' : 'black',\n                  fontWeight: 'bold',\n                  fontSize: '20px',\n                }}\n              >\n                {attempt.guess[i].toUpperCase()}\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Render the Wordle game to the root\nReactDOM.render(<WordleGame />, document.getElementById('root'));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}